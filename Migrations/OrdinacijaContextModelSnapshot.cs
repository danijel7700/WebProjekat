// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace WebProjekat.Migrations
{
    [DbContext(typeof(OrdinacijaContext))]
    partial class OrdinacijaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.ToTable("Korisnik");
                });

            modelBuilder.Entity("Models.Ordinacija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.ToTable("Ordinacija");
                });

            modelBuilder.Entity("Models.Spoj", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("UslugaID")
                        .HasColumnType("int");

                    b.Property<int?>("ZubarID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UslugaID");

                    b.HasIndex("ZubarID");

                    b.ToTable("Spoj");
                });

            modelBuilder.Entity("Models.Termin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Vreme")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Termin");
                });

            modelBuilder.Entity("Models.Usluga", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.ToTable("Usluga");
                });

            modelBuilder.Entity("Models.Zakazano", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int?>("TerminID")
                        .HasColumnType("int");

                    b.Property<int?>("UslugaID")
                        .HasColumnType("int");

                    b.Property<int?>("ZubarID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("TerminID");

                    b.HasIndex("UslugaID");

                    b.HasIndex("ZubarID");

                    b.ToTable("Zakazano");
                });

            modelBuilder.Entity("Models.Zubar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Godine")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OrdinacijaID")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.HasIndex("OrdinacijaID");

                    b.ToTable("Zubar");
                });

            modelBuilder.Entity("Models.Spoj", b =>
                {
                    b.HasOne("Models.Usluga", "Usluga")
                        .WithMany("Zubari")
                        .HasForeignKey("UslugaID");

                    b.HasOne("Models.Zubar", "Zubar")
                        .WithMany("Usluge")
                        .HasForeignKey("ZubarID");

                    b.Navigation("Usluga");

                    b.Navigation("Zubar");
                });

            modelBuilder.Entity("Models.Zakazano", b =>
                {
                    b.HasOne("Models.Korisnik", "Korisnik")
                        .WithMany("ZakazaniTermini")
                        .HasForeignKey("KorisnikID");

                    b.HasOne("Models.Termin", "Termin")
                        .WithMany("ZubarTermin")
                        .HasForeignKey("TerminID");

                    b.HasOne("Models.Usluga", "Usluga")
                        .WithMany("ZakazanTermin")
                        .HasForeignKey("UslugaID");

                    b.HasOne("Models.Zubar", "Zubar")
                        .WithMany("ZakazaniTermini")
                        .HasForeignKey("ZubarID");

                    b.Navigation("Korisnik");

                    b.Navigation("Termin");

                    b.Navigation("Usluga");

                    b.Navigation("Zubar");
                });

            modelBuilder.Entity("Models.Zubar", b =>
                {
                    b.HasOne("Models.Ordinacija", "Ordinacija")
                        .WithMany("Zubari")
                        .HasForeignKey("OrdinacijaID");

                    b.Navigation("Ordinacija");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Navigation("ZakazaniTermini");
                });

            modelBuilder.Entity("Models.Ordinacija", b =>
                {
                    b.Navigation("Zubari");
                });

            modelBuilder.Entity("Models.Termin", b =>
                {
                    b.Navigation("ZubarTermin");
                });

            modelBuilder.Entity("Models.Usluga", b =>
                {
                    b.Navigation("ZakazanTermin");

                    b.Navigation("Zubari");
                });

            modelBuilder.Entity("Models.Zubar", b =>
                {
                    b.Navigation("Usluge");

                    b.Navigation("ZakazaniTermini");
                });
#pragma warning restore 612, 618
        }
    }
}
